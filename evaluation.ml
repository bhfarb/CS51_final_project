(*
                         CS 51 Final Project
                         MiniML -- Evaluation
*)

(* This module implements a small untyped ML-like language under
   various operational semantics.
 *)

open Expr ;;

(* Exception for evaluator runtime, generated by a runtime error *)
exception EvalError of string ;;
(* Exception for evaluator runtime, generated by an explicit "raise" construct *)
exception EvalException ;;


(*......................................................................
  Environments and values
 *)

module type Env_type = sig
    type env
    type value =
      | Val of expr
      | Closure of (expr * env)
    val create : unit -> env
    val close : expr -> env -> value
    val lookup : env -> varid -> value
    val extend : env -> varid -> value ref -> env
    val env_to_string : env -> string
    val value_to_string : ?printenvp:bool -> value -> string
  end

module Env : Env_type =
  struct
    type env = (varid * value ref) list
     and value =
       | Val of expr
       | Closure of (expr * env)

    (* Creates an empty environment *)
    let create () : env = [] ;;

    (* Creates a closure from an expression and the environment it's
       defined in *)
    let close (exp : expr) (env : env) : value =
      Closure (exp, env) ;;

    (* Looks up the value of a variable in the environment *)
    let lookup (env : env) (varname : varid) : value =
      try !(snd (List.find (fun (id, _v) -> id = varname) env))
      with Not_found -> raise (EvalError ("unbound variable " ^ varname));;

    (* Returns a new environment just like env except that it maps the
       variable varid to loc *)
    let extend (env : env) (varname : varid) (loc : value ref) : env =
      (varname, loc) :: env ;;

    (* Returns a printable string representation of an environment *)
    let rec env_to_string (env : env) : string =
      "[" ^ (List.fold_right
               (fun (id, v) s -> id ^ " : " ^ value_to_string !v ^ ", " ^ s)
               env "]")

  (* Returns a printable string representation of a value; the flag
     printenvp determines whether to include the environment in the
     string representation when called on a closure *)
    and value_to_string ?(printenvp : bool = true) (v : value) : string =
      match v with
      | Val p -> "Value " ^ (exp_to_abstract_string p)
      | Closure (p, e) ->
        if printenvp then "Closure " ^ (exp_to_abstract_string p) ^
                          ", Environment: " ^ (env_to_string e)
        else "Closure " ^ (exp_to_abstract_string p) ;;
  end ;;

(*......................................................................
  Evaluation functions
  Each of the evaluation functions below, evaluates an expression exp
  in an enviornment env returning a result of type value. We've
  provided an initial implementation for a trivial evaluator, which
  just converts the expression unchanged to a value and returns it,
  along with "stub code" for three more evaluators: a substitution
  model evaluator and dynamic and lexical environment model versions.
  Each evaluator is of type expr -> Env.env -> Env.value for
  consistency, though some of the evaluators don't need an
  environment, and some will only return values that are "bare
  values" (that is, not closures).
  DO NOT CHANGE THE TYPE SIGNATURES OF THESE FUNCTIONS. Compilation
  against our unit tests relies on their having these signatures. If
  you want to implement an extension whose evaluator has a different
  signature, implement it as eval_e below.  *)

(* The TRIVIAL EVALUATOR, which leaves the expression to be evaluated
   essentially unchanged, just converted to a value for consistency
   with the signature of the evaluators. *)

let eval_t (exp : expr) (_env : Env.env) : Env.value =
  (* coerce the expr, unchanged, into a value *)
  Env.Val exp ;;

(* binop evaluator for all eval types *)

let abstracted_eval (eval : expr -> Env.env -> Env.value)
                    (exp : expr)
                    (env : Env.env) : Env.value =
  let binop_eval (e : Env.env)
                 (eval: expr -> Env.env -> Env.value)
                 (op : binop)
                 (v1 : expr)
                 (v2 : expr) =
    let make ?(f_int : int -> int -> int = ( + ))
             ?(f_bool : 'a -> 'a -> bool = ( = ))
             (message: string) =
      match op with
      | Plus | Minus | Times ->
        (match eval v1 e, eval v2 e with
         | Env.Val Num a, Env.Val Num b -> eval (Num (f_int a b)) e
         | _ -> raise (EvalError (message ^ ": type error")))
      | Equals | LessThan ->
        (match eval v1 e, eval v2 e with
         | Env.Val x, Env.Val y -> eval (Bool (f_bool x y)) e
         | _ -> raise (EvalError (message ^ ": type error"))) in
    match op with
    | Plus -> make ~f_int:( + ) "plus"
    | Minus -> make ~f_int:( - ) "minus"
    | Times -> make ~f_int:( * ) "times"
    | Equals -> make ~f_bool:( = ) "equals"
    | LessThan -> make ~f_bool:( < ) "less than" in
  match exp with
  | Num _ | Bool _ | Unit -> Env.Val exp
  | Binop (o, arg1, arg2) -> binop_eval env eval o arg1 arg2
  | Unop (o, arg) ->
    (match o with
     | Negate -> (match eval arg env with
     | Env.Val Num n -> eval (Num (~- n)) env
     | _ -> raise (EvalError "negate: type error")))
  | Conditional (a, arg1, arg2) ->
    (match eval a env with
     | Env.Val Bool b -> if  b then eval arg1 env else eval arg2 env
     | _ -> raise (EvalError "conditional: type error"))
  | Raise -> raise EvalException
  | Unassigned -> raise (EvalError "unassigned")
  | _ -> raise (EvalError "not an abstracted expression")

(* The SUBSTITUTION MODEL evaluator *)

let rec eval_s (exp : expr) (_env : Env.env) : Env.value =
  match exp with
  | Num _ | Bool _ | Unop (_, _) | Conditional (_, _, _) | Raise
  | Binop (_, _, _) | Unassigned | Unit -> abstracted_eval eval_s exp _env
  | Fun (_, _)-> Env.Val exp
  | Var _ -> raise (EvalError "var: type error")
  | Let (x, def, body) ->
    (match eval_s def _env with
     | Env.Val v -> eval_s (subst x v body) _env
     | _ -> raise (EvalError "let: type error"))
  | Letrec (x, def, body) ->
    (match eval_s def _env with
     | Env.Val v ->
       eval_s (subst x (subst x (Letrec (x, v, Var x)) v) body) _env
     | _ -> raise (EvalError "letrec: type error"))
  | App (arg1, arg2) ->
    (match eval_s arg1 _env, eval_s arg2 _env with
     | Env.Val Fun (x, body), Env.Val v -> eval_s (subst x v body) _env
     | _ -> raise (EvalError "app: type error")) ;;

(* The DYNAMICALLY-SCOPED ENVIRONMENT MODEL evaluator *)

let rec eval_d (exp : expr) (env : Env.env) : Env.value =
  match exp with
  | Num _ | Bool _ | Unop (_, _) | Conditional (_, _, _) | Raise
  | Binop (_, _, _) | Unassigned | Unit -> abstracted_eval eval_d exp env
  | Fun (_, _) -> Env.Val exp
  | Var x -> Env.lookup env x
  | Let (x, def, body) -> eval_d body (Env.extend env x (ref (eval_d def env)))
  | Letrec (x, def, body) ->
    let output = eval_d body (Env.extend env x
                                (ref (eval_d def
                                        (Env.extend env x
                                           (ref (Env.Val Unassigned)))))) in
    (match output with
     | Env.Val Unassigned -> raise (EvalError "recursive loop")
     | _ -> output)
  | App (arg1, arg2) ->
    (match eval_d arg1 env, eval_d arg2 env with
     | Env.Val Fun (x, body), v -> eval_d body (Env.extend env x (ref v))
     | _ -> raise (EvalError "app: type error")) ;;


(* The LEXICALLY-SCOPED ENVIRONMENT MODEL evaluator *)

let rec eval_l (exp : expr) (env : Env.env) : Env.value =
  match exp with
  | Num _ | Bool _ | Unop (_, _) | Conditional (_, _, _) | Raise
  | Binop (_, _, _) | Unassigned | Unit -> abstracted_eval eval_l exp env
  | Fun (_, _) -> Env.close exp env
  | Var x -> Env.lookup env x
  | Let (x, def, body) -> eval_l body (Env.extend env x (ref (eval_l def env)))
  | Letrec (x, def, body) ->
    let un_loc = ref (Env.Val Unassigned) in
    un_loc := eval_l def (Env.extend env x (un_loc));
    let output = eval_l body (Env.extend env x un_loc) in
    (match output with
     | Env.Val Unassigned -> raise (EvalError "recursive loop")
     | _ -> output)
  | App (arg1, arg2) ->
    (match eval_l arg1 env, eval_l arg2 env with
     | Env.Closure (Fun (x, body), e), v ->
       eval_l body (Env.extend e x (ref v))
     | _ -> raise (EvalError "app: type error")) ;;

(* The EXTENDED evaluator -- if you want, you can provide your
   extension as a separate evaluator, or if it is type- and
   correctness-compatible with one of the above, you can incorporate
   your extensions within eval_s, eval_d, or eval_l. *)

let eval_e _ =
  failwith "eval_e not implemented" ;;

(* Connecting the evaluators to the external world. The REPL in
   miniml.ml uses a call to the single function evaluate defined
   here. Initially, evaluate is the trivial evaluator eval_t. But you
   can define it to use any of the other evaluators as you proceed to
   implement them. (We will directly unit test the four evaluators
   above, not the evaluate function, so it doesn't matter how it's set
   when you submit your solution.) *)

let evaluate = eval_l ;;
